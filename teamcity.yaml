apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: teamcity-agent
  labels:
    app.podman.io/name: teamcity-agent
spec:
  accessModes:
    - ReadWriteOnce

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: teamcity-server
  labels:
    app.podman.io/name: teamcity-server
spec:
  accessModes:
    - ReadWriteOnce

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: teamcity-agent
  labels:
    app.podman.io/name: teamcity-agent
data:
  initd-docker: |
    #!/bin/sh

    #
    # Modified /etc/init.d/docker file to allow running docker-in-podman...
    # This script is a copy of the init script inside of the agent image, with all calls to ulmit commented out.
    # (podman doesn't allow setting limits from inside containers)
    #

    set -e

    ### BEGIN INIT INFO
    # Provides:           docker
    # Required-Start:     $syslog $remote_fs
    # Required-Stop:      $syslog $remote_fs
    # Should-Start:       cgroupfs-mount cgroup-lite
    # Should-Stop:        cgroupfs-mount cgroup-lite
    # Default-Start:      2 3 4 5
    # Default-Stop:       0 1 6
    # Short-Description:  Create lightweight, portable, self-sufficient containers.
    # Description:
    #  Docker is an open-source project to easily create lightweight, portable,
    #  self-sufficient containers from any application. The same container that a
    #  developer builds and tests on a laptop can run at scale, in production, on
    #  VMs, bare metal, OpenStack clusters, public clouds and more.
    ### END INIT INFO

    export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

    BASE=docker

    # modify these in /etc/default/$BASE (/etc/default/docker)
    DOCKERD=/usr/bin/dockerd
    # This is the pid file managed by docker itself
    DOCKER_PIDFILE=/var/run/$BASE.pid
    # This is the pid file created/managed by start-stop-daemon
    DOCKER_SSD_PIDFILE=/var/run/$BASE-ssd.pid
    DOCKER_LOGFILE=/var/log/$BASE.log
    DOCKER_OPTS=
    DOCKER_DESC="Docker"

    # Get lsb functions
    . /lib/lsb/init-functions

    if [ -f /etc/default/$BASE ]; then
      . /etc/default/$BASE
    fi

    # Check docker is present
    if [ ! -x $DOCKERD ]; then
      log_failure_msg "$DOCKERD not present or not executable"
      exit 1
    fi

    fail_unless_root() {
      if [ "$(id -u)" != '0' ]; then
        log_failure_msg "$DOCKER_DESC must be run as root"
        exit 1
      fi
    }

    case "$1" in
      start)
        fail_unless_root

        touch "$DOCKER_LOGFILE"
        chgrp docker "$DOCKER_LOGFILE"

        #
        # XXX :: commenting ulimit calls enable docker-in-podman
        #

        # ulimit -n 1048576
        # Having non-zero limits causes performance problems due to accounting overhead
        # in the kernel. We recommend using cgroups to do container-local accounting.
        # if [ "$BASH" ]; then
        #   ulimit -u unlimited
        # else
        #   ulimit -p unlimited
        # fi

        log_begin_msg "Starting $DOCKER_DESC: $BASE"
        start-stop-daemon --start --background \
          --no-close \
          --exec "$DOCKERD" \
          --pidfile "$DOCKER_SSD_PIDFILE" \
          --make-pidfile \
          -- \
          -p "$DOCKER_PIDFILE" \
          $DOCKER_OPTS \
          >> "$DOCKER_LOGFILE" 2>&1
        log_end_msg $?
        ;;

      stop)
        fail_unless_root
        if [ -f "$DOCKER_SSD_PIDFILE" ]; then
          log_begin_msg "Stopping $DOCKER_DESC: $BASE"
          start-stop-daemon --stop --pidfile "$DOCKER_SSD_PIDFILE" --retry 10
          log_end_msg $?
        else
          log_warning_msg "Docker already stopped - file $DOCKER_SSD_PIDFILE not found."
        fi
        ;;

      restart)
        fail_unless_root
        docker_pid=$(cat "$DOCKER_SSD_PIDFILE" 2> /dev/null || true)
        [ -n "$docker_pid" ] \
          && ps -p $docker_pid > /dev/null 2>&1 \
          && $0 stop
        $0 start
        ;;

      force-reload)
        fail_unless_root
        $0 restart
        ;;

      status)
        status_of_proc -p "$DOCKER_SSD_PIDFILE" "$DOCKERD" "$DOCKER_DESC"
        ;;

      *)
        echo "Usage: service docker {start|stop|restart|status}"
        exit 1
        ;;
    esac

---

apiVersion: v1
kind: Pod
metadata:
  name: teamcity
  labels:
    app.podman.io/name: teamcity
spec:
  containers:
    - name: agent
      image: docker.io/jetbrains/teamcity-agent:2024.07-linux-sudo
      env:
        - name: SERVER_URL
          value: http://localhost:8111
        - name: DOCKER_IN_DOCKER
          value: start
      securityContext:
        privileged: true
      volumeMounts:
        - name: teamcity-agent
          mountPath: /data/teamcity_agent/conf
        - name: initd-docker
          mountPath: /etc/init.d/docker
          subPath: initd-docker
    - name: server
      image: docker.io/jetbrains/teamcity-server:2024.07
      ports:
        - containerPort: 8111
          hostPort: 8111
      volumeMounts:
        - name: teamcity-server
          mountPath: /data/teamcity_server/datadir
  volumes:
    - name: teamcity-agent
      persistentVolumeClaim:
        claimName: teamcity-agent
    - name: teamcity-server
      persistentVolumeClaim:
        claimName: teamcity-server
    - name: initd-docker
      configMap:
        name: teamcity-agent
        defaultMode: 0755